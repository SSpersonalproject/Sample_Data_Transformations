import duckdb
import pandas as pd
from constants import DB_PATH

# This query checks how many distinct courses there are.

conn = duckdb.connect(str(DB_PATH))
result = conn.execute(
"""
WITH MONTH_END_CALCS AS (
SELECT
    *,
    date_part('year', TXN_DATE) as YEAR,
    date_part('month', TXN_DATE) as MONTH,
    FIRST_VALUE(UNIT_PRICE) OVER (
        PARTITION BY YEAR, MONTH, SKU_CODE
        ORDER BY TXN_DATE DESC
    ) AS MONTH_END_UNIT_PRICE,

    FIRST_VALUE(COST) OVER (
        PARTITION BY YEAR, MONTH, SKU_CODE
        ORDER BY TXN_DATE DESC
    ) AS MONTH_END_COST
FROM TRANSACTION.TRANSACTIONS
),

MONTH_END_METRICS AS (
     SELECT DISTINCT
    date_part('year', TXN_DATE) AS YEAR,
    date_part('month', TXN_DATE) AS MONTH,
    SKU_CODE,
    MONTH_END_UNIT_PRICE,
    MONTH_END_COST
FROM MONTH_END_CALCS
),

MONTH_END_DT AS (
SELECT
    date_part('year', TXN_DATE) AS YEAR,
    date_part('month', TXN_DATE) AS MONTH,
    MAX(TXN_DATE) AS MONTH_END_DT,
FROM TRANSACTION.TRANSACTIONS
GROUP BY YEAR, MONTH
    )

,MONTH_END_INV AS (
SELECT
    YEAR,
    MONTH,
    SKU_CODE,
    TXN_DATE,
    CUMULATIVE_QUANTITY
FROM (
    SELECT
        date_part('year', TXN_DATE) AS YEAR,
        date_part('month', TXN_DATE) AS MONTH,
        SKU_CODE,
        TXN_DATE,
        SUM(QUANTITY) OVER (
            PARTITION BY SKU_CODE
            ORDER BY TIMESTAMP ASC
            ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW
        ) AS CUMULATIVE_QUANTITY,
        ROW_NUMBER() OVER (
            PARTITION BY date_part('year', TXN_DATE), date_part('month', TXN_DATE), SKU_CODE
            ORDER BY TXN_DATE DESC, TIMESTAMP DESC
        ) AS RN
    FROM TRANSACTION.TRANSACTIONS
) FILTERED
WHERE RN = 1
),

INVENTORY_BY_SKU AS (
SELECT
    MEM.SKU_CODE,
    MED.YEAR,
    MED.MONTH,
    MED.MONTH_END_DT,
    MEM.MONTH_END_UNIT_PRICE,
    MEM.MONTH_END_COST,
    MEI.CUMULATIVE_QUANTITY AS STOCK_ON_HAND,
    MEI.CUMULATIVE_QUANTITY * MEM.MONTH_END_UNIT_PRICE AS TOTAL_INVENTORY_VALUE
FROM MONTH_END_METRICS MEM
INNER JOIN MONTH_END_DT MED USING (YEAR, MONTH)
INNER JOIN MONTH_END_INV MEI
    ON MED.MONTH = MEI.MONTH
    AND MED.YEAR = MEI.YEAR
    AND MEM.SKU_CODE = MEI.SKU_CODE
    AND MEI.TXN_DATE = MED.MONTH_END_DT
ORDER BY MEM.SKU_CODE, MED.YEAR, MED.MONTH
)

SELECT
    YEAR,
    MONTH,
    SUM(TOTAL_INVENTORY_VALUE) AS TOTAL_INVENTORY_VALUE
FROM INVENTORY_BY_SKU
GROUP BY
    YEAR,
    MONTH
"""
).fetchall()
print("Output:", result)
